enum Network {
    "Bitcoin",
    "Testnet",
    "Signet",
    "Regtest",
};

dictionary Config {
    Network network;
    sequence<u8> seed;
    string esplora_api_url;
    NodeAddress lsp_node;
};

dictionary NodeAddress {
    string pub_key;
    string address;
};

callback interface RedundantStorageCallback {
    boolean object_exists(string bucket, string key);
    sequence<u8> get_object(string bucket, string key);
    boolean check_health(string bucket);
    boolean put_object(string bucket, string key, sequence<u8> value);
    sequence<string> list_objects(string bucket);
};

[Error]
enum InitializationError {
    "AsyncRuntime",
    "ChainMonitorWatchChannel",
    "ChainSync",
    "ChannelMonitorBackup",
    "EsploraClient",
    "KeysManager",
    "Logic",
    "PeerConnection",
    "SecretGeneration",
};

[Error]
enum RuntimeError {
    "ChainSync",
    "InvalidAddress",
    "InvalidPubKey",
    "Logic",
    "PeerConnection",
};

interface LightningNode {
    [Throws=InitializationError]
    constructor([ByRef] Config config, RedundantStorageCallback redundant_storage_callback);
    NodeInfo get_node_info();
};

dictionary NodeInfo {
    sequence<u8> node_pubkey;
    u16 num_channels;
    u16 num_usable_channels;
    u64 local_balance_msat;
    u16 num_peers;
};

[Error]
enum LspError {
    "Grpc",
    "Network",
    "UnexpectedUniFFI",
};

callback interface LspCallback {
    [Throws=LspError]
    sequence<u8> channel_information();
    [Throws=LspError]
    void register_payment(sequence<u8> bytes);
};

enum LogLevel {
    "Error",
    "Warn",
    "Info",
    "Debug",
    "Trace",
};

dictionary Secret {
    sequence<string> mnemonic;
    string passphrase;
    sequence<u8> seed;
};

namespace lipalightninglib {
    void init_native_logger_once(LogLevel min_level);
    [Throws=InitializationError]
    Secret generate_secret(string passphrase);
    // TODO: Implement.
    // sequence<u8> mnemonic_to_seed(sequence<string> mnemonic, string passphrase);
};
