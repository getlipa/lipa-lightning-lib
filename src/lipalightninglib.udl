//
// ----------------------------- LN NODE INTERFACE + RELATED DEFINITIONS -----------------------------
//

interface LightningNode {
    [Throws=LnError]
    constructor(Config config, EventsCallback events_callback, NotificationsCallback notifications_callback);

    [Throws=LnError]
    NodeInfo get_node_info();

    [Throws=LnError]
    LspFee query_lsp_fee();

    [Throws=LnError]
    PaymentAmountLimits get_payment_amount_limits();

    [Throws=LnError]
    CalculateLspFeeResponse calculate_lsp_fee(u64 amount_sat);

    [Throws=LnError]
    InvoiceDetails create_invoice(u64 amount_sat, OpeningFeeParams? lsp_fee_params, string description, InvoiceCreationMetadata metadata);

    [Throws=DecodeDataError]
    DecodedData decode_data(string data);

    MaxRoutingFeeMode get_payment_max_routing_fee_mode(u64 amount_sat);

    [Throws=LnError]
    InvoiceAffordability get_invoice_affordability(u64 amount_sat);

    [Throws=PayError]
    void pay_invoice(InvoiceDetails invoice_details, PaymentMetadata metadata);

    [Throws=PayError]
    void pay_open_invoice(InvoiceDetails invoice_details, u64 amount_sat, PaymentMetadata metadata);

    [Throws=LnUrlPayError]
    string pay_lnurlp(LnUrlPayRequestData lnurl_pay_request_data, u64 amount_sat);

    [Throws=LnError]
    ListActivitiesResponse get_latest_activities(u32 number_of_activities);

    [Throws=LnError]
    Payment get_payment(string hash);

    [Throws=LnError]
    sequence<string> list_lightning_addresses();

    void foreground();

    void background();

    sequence<string> list_currency_codes();

    ExchangeRate? get_exchange_rate();

    void change_fiat_currency(string fiat_currency);

    void change_timezone_config(TzConfig timezone_config);

    [Throws=LnError]
    void accept_pocket_terms_and_conditions(i64 version);

    [Throws=LnError]
    TermsAndConditionsStatus get_terms_and_conditions_status(TermsAndConditions terms_and_conditions);

    [Throws=LnError]
    FiatTopupInfo register_fiat_topup(string? email, string user_iban, string user_currency);

    [Throws=LnError]
    void reset_fiat_topup();

    [Throws=LnError]
    sequence<ActionRequiredItem> list_action_required_items();

    [Throws=LnError]
    sequence<OfferInfo> query_uncompleted_offers();

    [Throws=LnError]
    Amount calculate_lightning_payout_fee(OfferInfo offer);

    [Throws=LnError]
    string request_offer_collection(OfferInfo offer);

    [Throws=LnError]
    void register_notification_token(string notification_token, string language_iso_639_1, string country_iso_3166_1_alpha_2);

    [Throws=LnError]
    string get_wallet_pubkey_id();

    [Throws=LnError]
    string get_payment_uuid(string payment_hash);

    [Throws=LnError]
    u32 query_onchain_fee_rate();

    [Throws=LnError]
    SweepInfo prepare_sweep(string address, u32 onchain_fee_rate);

    [Throws=LnError]
    string sweep(SweepInfo sweep_info);

    [Throws=SwapError]
    SwapAddressInfo generate_swap_address(OpeningFeeParams? lsp_fee_params);

    [Throws=LnError]
    sequence<FailedSwapInfo> get_unresolved_failed_swaps();

    [Throws=LnError]
    ResolveFailedSwapInfo prepare_resolve_failed_swap(FailedSwapInfo failed_swap_info, string to_address, u32 onchain_fee_rate);

    [Throws=LnError]
    string resolve_failed_swap(ResolveFailedSwapInfo resolve_failed_swap_info);

    [Throws=LnError]
    ChannelCloseResolvingFees get_channel_close_resolving_fees();

    [Throws=SwapError]
    string swap_onchain_to_lightning(u32 sats_per_vbyte, OpeningFeeParams? lsp_fee_params);

    [Throws=LnError]
    void hide_topup(string id);

    [Throws=LnError]
    void log_debug_info();

    [Throws=LnError]
    FiatTopupInfo? retrieve_latest_fiat_topup_info();

    [Throws=LnError]
    BreezHealthCheckStatus get_health_status();

    [Throws=LnError]
    boolean is_clear_wallet_feasible();

    [Throws=LnError]
    ClearWalletInfo prepare_clear_wallet();

    [Throws=LnError]
    void clear_wallet(ClearWalletInfo clear_wallet_info, BitcoinAddressData destination_onchain_address_data);

    [Throws=LnError]
    void set_analytics_config(AnalyticsConfig config);

    [Throws=LnError]
    AnalyticsConfig get_analytics_config();
};

dictionary Config {
    EnvironmentCode environment;
    bytes seed;
    string fiat_currency;
    string local_persistence_path;
    TzConfig timezone_config;
    boolean enable_file_logging;
};

enum EnvironmentCode {
    "Local",
    "Dev",
    "Stage",
    "Prod",
};

dictionary TzConfig {
    string timezone_id;
    i32 timezone_utc_offset_secs;
};

callback interface EventsCallback {
    void payment_received(string payment_hash);
    void payment_sent(string payment_hash, string payment_preimage);
    void payment_failed(string payment_hash);
    void channel_closed(string channel_id, string reason);
    void breez_health_status_changed_to(BreezHealthCheckStatus status);
};

callback interface NotificationsCallback {
    void operation_started(string key);
    void operation_successful(string key);
    void operation_failed(string key);
};

dictionary NodeInfo {
    string node_pubkey;
    sequence<string> peers;
    Amount onchain_balance;
    ChannelsInfo channels_info;
};

dictionary ChannelsInfo {
    Amount local_balance;
    Amount inbound_capacity;
    Amount outbound_capacity;
};

dictionary LspFee {
    Amount channel_minimum_fee;
    u64 channel_fee_permyriad;
};

dictionary PaymentAmountLimits {
    Amount max_receive;
    LiquidityLimit liquidity_limit;
};

dictionary OpeningFeeParams {
        u64 min_msat;
        u32 proportional;
        string valid_until;
        u32 max_idle_time;
        u32 max_client_to_self_delay;
        string promise;
};

dictionary CalculateLspFeeResponse {
    Amount lsp_fee;
    OpeningFeeParams? lsp_fee_params;
};

[Enum]
interface LiquidityLimit {
    None();
    MaxFreeReceive(Amount amount);
    MinReceive(Amount amount);
};

dictionary InvoiceDetails {
    string invoice;
    Amount? amount;
    string description;
    string payment_hash;
    string payee_pub_key;
    timestamp creation_timestamp;
    duration expiry_interval;
    timestamp expiry_timestamp;
};

[Enum]
interface DecodedData {
    Bolt11Invoice(InvoiceDetails invoice_details);
    LnUrlPay(LnUrlPayDetails lnurl_pay_details);
    LnUrlWithdraw(LnUrlWithdrawDetails lnurl_withdraw_details);
    OnchainAddress(BitcoinAddressData onchain_address_details);
};

dictionary LnUrlPayDetails {
    string domain;
    string short_description;
    string? long_description;
    Amount min_sendable;
    Amount max_sendable;
    LnUrlPayRequestData request_data;
};

dictionary LnUrlPayRequestData {
    string callback;
    u64 min_sendable;
    u64 max_sendable;
    string metadata_str;
    u16 comment_allowed;
    string domain;
    string? ln_address;
};

dictionary LnUrlWithdrawDetails {
    Amount min_withdrawable;
    Amount max_withdrawable;
    LnUrlWithdrawRequestData request_data;
};

dictionary LnUrlWithdrawRequestData {
    string callback;
    string k1;
    string default_description;
    u64 min_withdrawable;
    u64 max_withdrawable;
};

dictionary BitcoinAddressData {
    string address;
    Network network;
    u64? amount_sat;
    string? label;
    string? message;
};

enum Network {
    "Bitcoin",
    "Testnet",
    "Signet",
    "Regtest",
};

[Enum]
interface MaxRoutingFeeMode {
    Relative(u16 max_fee_permyriad);
    Absolute(Amount max_fee_amount);
};

[Enum]
interface Activity {
    PaymentActivity(Payment payment);
    ChannelCloseActivity(ChannelClose channel_close);
};

dictionary ListActivitiesResponse {
    sequence<Activity> pending_activities;
    sequence<Activity> completed_activities;
};

dictionary ChannelClose {
    Amount amount;
    ChannelCloseState state;
    TzTime? closed_at;
    string closing_tx_id;
};

enum ChannelCloseState {
    "Pending",
    "Confirmed",
};

dictionary Payment {
    PaymentType payment_type;
    PaymentState payment_state;
    PayErrorCode? fail_reason;
    string hash;
    Amount amount;
    Amount requested_amount;
    InvoiceDetails invoice_details;
    TzTime created_at;
    string description;
    string? preimage;
    Amount? network_fees;
    Amount? lsp_fees;
    OfferKind? offer;
    SwapInfo? swap;
    Recipient? recipient;
};

enum PaymentType {
    "Receiving",
    "Sending",
};

enum PaymentState {
    "Created",
    "Succeeded",
    "Failed",
    "Retried",
    "InvoiceExpired",
};

dictionary TzTime {
    timestamp time;
    string timezone_id;
    i32 timezone_utc_offset_secs;
};

dictionary FiatValue {
    u64 minor_units;
    string currency_code;
    u32 rate;
    timestamp converted_at;
};

dictionary ExchangeRate {
    string currency_code;
    u32 rate;
    timestamp updated_at;
};

dictionary Amount {
    u64 sats;
    FiatValue? fiat;
};

dictionary FiatTopupInfo {
    string order_id;
    string debitor_iban;
    string creditor_reference;
    string creditor_iban;
    string creditor_bank_name;
    string creditor_bank_street;
    string creditor_bank_postal_code;
    string creditor_bank_town;
    string creditor_bank_country;
    string creditor_bank_bic;
    string creditor_name;
    string creditor_street;
    string creditor_postal_code;
    string creditor_town;
    string creditor_country;
    string currency;
};

[Enum]
interface ActionRequiredItem {
    UncompletedOffer(OfferInfo offer);
    UnresolvedFailedSwap(FailedSwapInfo failed_swap);
    ChannelClosesFundsAvailable(Amount available_funds);
};

dictionary OfferInfo {
    OfferKind offer_kind;
    Amount amount;
    string? lnurlw;
    timestamp created_at;
    timestamp? expires_at;
    OfferStatus status;
};

enum PermanentFailureCode {
    "ThresholdExceeded",
    "OrderInactive",
    "CompaniesUnsupported",
    "CountryUnsupported",
    "OtherRiskDetected",
    "CustomerRequested",
    "AccountNotMatching",
    "PayoutExpired",
};

[Enum]
interface TemporaryFailureCode {
    NoRoute();
    InvoiceExpired();
    Unexpected();
    Unknown(
        string msg
    );
};

[Enum]
interface PocketOfferError {
    TemporaryFailure(
        TemporaryFailureCode code
    );
    PermanentFailure(
        PermanentFailureCode code
    );
};

[Enum]
interface OfferKind {
    Pocket(
        string id,
        ExchangeRate exchange_rate,
        u64 topup_value_minor_units,
        u64? topup_value_sats,
        u64 exchange_fee_minor_units,
        u16 exchange_fee_rate_permyriad,
        Amount? lightning_payout_fee,
        PocketOfferError? error
    );
};

enum OfferStatus {
    "READY",
    "FAILED",
    "REFUNDED",
    "SETTLED",
};

dictionary SweepInfo {
    string address;
    u32 onchain_fee_rate;
    Amount onchain_fee_sat;
    Amount amount;
};

dictionary SwapAddressInfo {
    string address;
    Amount min_deposit;
    Amount max_deposit;
    Amount swap_fee;
};

dictionary ResolveFailedSwapInfo {
    string swap_address;
    Amount recovered_amount;
    Amount onchain_fee;
    string to_address;
    u32 onchain_fee_rate;
};

dictionary FailedSwapInfo {
    string address;
    Amount amount;
    timestamp created_at;
};

dictionary SwapInfo {
    string bitcoin_address;
    TzTime created_at;
    u64 paid_msats;
};

enum PaymentSource {
    "Camera",
    "Clipboard",
    "Nfc",
    "Manual",
};

dictionary PaymentMetadata {
    PaymentSource source;
    timestamp process_started_at;
};

dictionary InvoiceCreationMetadata {
    string request_currency;
};

enum TermsAndConditions {
    "Lipa",
    "Pocket",
};

dictionary TermsAndConditionsStatus {
    timestamp? accepted_at;
    TermsAndConditions terms_and_conditions;
    i64 version;
};

enum BreezHealthCheckStatus {
    "Operational",
    "Maintenance",
    "ServiceDisruption",
};

enum InvoiceAffordability {
    "NotEnoughFunds",
    "UnaffordableFees",
    "Affordable",
};

dictionary ClearWalletInfo {
    Amount clear_amount;
    Amount total_estimated_fees;
    Amount onchain_fee;
    Amount swap_fee;
    string fees_hash;
};

dictionary ChannelCloseResolvingFees {
    SwapToLightningFees? swap_fees;
    Amount sweep_onchain_fee_estimate;
    u32 sat_per_vbyte;
};

dictionary SwapToLightningFees {
    Amount swap_fee;
    Amount onchain_fee;
    Amount channel_opening_fee;
    Amount total_fees;
    OpeningFeeParams? lsp_fee_params;
};

[Enum]
interface Recipient {
    LightningAddress(string address);
    Unknown();
};

enum AnalyticsConfig {
    "Enabled",
    "Disabled",
};


//
// ----------------------------- TOP LEVEL FUNCTIONS + RELATED DEFINITIONS -----------------------------
//

namespace lipalightninglib {
    [Throws=SimpleError]
    Secret generate_secret(string passphrase);

    [Throws=MnemonicError]
    Secret mnemonic_to_secret(sequence<string> mnemonic_string, string passphrase);

    sequence<string> words_by_prefix(string prefix);

    [Throws=LnError]
    void accept_terms_and_conditions(EnvironmentCode environment, bytes seed, i64 version);

    [Throws=LnError]
    TermsAndConditionsStatus get_terms_and_conditions_status(EnvironmentCode environment, bytes seed, TermsAndConditions terms_and_conditions);

    [Throws=LnError]
    void recover_lightning_node(EnvironmentCode environment, bytes seed, string local_persistence_path, boolean enable_file_logging);

    [Throws=ParseError]
    void parse_lightning_address([ByRef] string address);
};

dictionary Secret {
    sequence<string> mnemonic;
    string passphrase;
    bytes seed;
};

//
// ----------------------------- ERROR RELATED DEFINITIONS -----------------------------
//

[Error]
interface SimpleError {
    Simple(string msg);
};

[Error]
interface MnemonicError {
    BadWordCount(u64 count);
    UnknownWord(u64 index);
    BadEntropyBitCount();
    InvalidChecksum();
    AmbiguousLanguages();
};

[Error]
interface ParseError {
    Incomplete();
    InvalidCharacter(u32 at);
};

[Error]
interface LnError {
    InvalidInput(string msg);
    RuntimeError(RuntimeErrorCode code, string msg);
    PermanentFailure(string msg);
};

enum RuntimeErrorCode {
    "AuthServiceUnavailable",
    "OfferServiceUnavailable",
    "LspServiceUnavailable",
    "BackupServiceUnavailable",
    "BackupNotFound",
    "NoOnChainFundsToResolve",
    "NodeUnavailable",
    "FailedFundMigration",
};

[Error]
interface PayError {
    InvalidInput(string msg);
    RuntimeError(PayErrorCode code, string msg);
    PermanentFailure(string msg);
};

enum PayErrorCode {
    "AlreadyUsedInvoice",
    "InvoiceExpired",
    "NoRouteFound",
    "PayingToSelf",
    "PaymentFailed",
    "PaymentTimeout",
    "RouteTooExpensive",
    "NodeUnavailable",
    "UnexpectedError",
};

[Enum]
interface UnsupportedDataType {
    BitcoinAddress();
    LnUrlAuth();
    NodeId();
    Url();
    Network(string network);
};

[Error]
interface DecodeDataError {
    LnUrlError(string msg);
    Unsupported(UnsupportedDataType typ);
    Unrecognized(string msg);
};

[Error]
interface LnUrlPayError {
    InvalidInput(string msg);
    RuntimeError(LnUrlPayErrorCode code, string msg);
    PermanentFailure(string msg);
};

enum LnUrlPayErrorCode {
    "LnUrlServerError",
    "NoRouteFound",
    "PaymentFailed",
    "PaymentTimeout",
    "RouteTooExpensive",
    "UnexpectedError",
    "ServiceConnectivity",
    "InvalidNetwork",
};

[Error]
interface SwapError {
    Generic(string err);
    ServiceConnectivity(string err);
    SwapInProgress(string err);
};
