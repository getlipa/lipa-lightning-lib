enum Network {
    "Bitcoin",
    "Testnet",
    "Signet",
    "Regtest",
};

dictionary Config {
    Network network;
    sequence<u8> seed;
    string esplora_api_url;
    NodeAddress lsp_node;
};

dictionary NodeAddress {
    string pub_key;
    string address;
};

callback interface RedundantStorageCallback {
    boolean object_exists(string bucket, string key);
    sequence<u8> get_object(string bucket, string key);
    boolean check_health(string bucket);
    boolean put_object(string bucket, string key, sequence<u8> value);
    sequence<string> list_objects(string bucket);
};

[Error]
enum InitializationError {
    "AsyncRuntime",
    "ChainMonitorWatchChannel",
    "ChainSync",
    "ChannelMonitorBackup",
    "EsploraClient",
    "KeysManager",
    "Logic",
    "PeerConnection",
    "PublicKey",
    "SecretGeneration",
};

[Error]
enum RuntimeError {
    "ChainSync",
    "InvalidAddress",
    "InvalidPubKey",
    "Logic",
    "PeerConnection",
};

[Error]
enum LipaError {
    "InvalidInput",
    "RuntimeError",
    "PermanentFailure",
};

interface LightningNode {
    [Throws=InitializationError]
    constructor([ByRef] Config config, RedundantStorageCallback redundant_storage_callback, LspCallback lsp_callback);

    NodeInfo get_node_info();

    [Throws=LipaError]
    LspFee query_lsp_fee();

    boolean connected_to_node([ByRef] NodeAddress node);

    [Throws=LipaError]
    string create_invoice(u64 amount_msat, string description);
};

dictionary ChannelsInfo {
    u16 num_channels;
    u16 num_usable_channels;
    u64 local_balance_msat;

    // Capacity the node can actually receive.
    // It excludes non usable channels, pending htlcs, channels reserves, etc.
    u64 inbound_capacity_msat;

    // Capacity the node can actually send.
    // It excludes non usable channels, pending htlcs, channels reserves, etc.
    u64 outbound_capacity_msat;
};

dictionary NodeInfo {
    sequence<u8> node_pubkey;
    u16 num_peers;
    ChannelsInfo channels_info;
};

dictionary LspFee {
  u64 min_msat;
  // 1_000_000 is 100%
  u64 rate_ppm;
};

[Error]
enum LspError {
    "Grpc",
    "Network",
    "UnexpectedUniFFI",
};

callback interface LspCallback {
    [Throws=LspError]
    sequence<u8> channel_information();
    [Throws=LspError]
    void register_payment(sequence<u8> bytes);
};

enum LogLevel {
    "Error",
    "Warn",
    "Info",
    "Debug",
    "Trace",
};

dictionary Secret {
    sequence<string> mnemonic;
    string passphrase;
    sequence<u8> seed;
};

namespace lipalightninglib {
    void init_native_logger_once(LogLevel min_level);
    [Throws=LipaError]
    Secret generate_secret(string passphrase);
    [Throws=LipaError]
    Secret mnemonic_to_secret(sequence<string> mnemonic_string, string passphrase);
    // TODO: Implement.
    // sequence<u8> mnemonic_to_seed(sequence<string> mnemonic, string passphrase);
};
